/* eslint-disable */
// generated by typescript-json-validator
import Ajv from "ajv";
import inspect from "object-inspect";
import { type Template } from "./template";

export const ajv: Ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  useDefaults: true
});

export type { Template };
export const TemplateSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  definitions: {
    TemplateAuthor: {
      properties: {
        name: {
          type: "string"
        },
        url: {
          type: "string"
        }
      },
      required: ["name", "url"],
      type: "object"
    },
    TemplateNumberQuestion: {
      properties: {
        placeholder: {
          type: "string"
        },
        question: {
          type: "string"
        },
        type: {
          enum: ["number"],
          type: "string"
        }
      },
      required: ["question", "type"],
      type: "object"
    },
    TemplateSection: {
      properties: {
        description: {
          type: "string"
        },
        questions: {
          items: {
            anyOf: [
              {
                $ref: "#/definitions/TemplateTextQuestion"
              },
              {
                $ref: "#/definitions/TemplateTextareaQuestion"
              },
              {
                $ref: "#/definitions/TemplateNumberQuestion"
              }
            ]
          },
          type: "array"
        },
        title: {
          type: "string"
        }
      },
      required: ["questions", "title"],
      type: "object"
    },
    TemplateTextQuestion: {
      properties: {
        length: {
          enum: ["long", "medium", "short"],
          type: "string"
        },
        placeholder: {
          type: "string"
        },
        question: {
          type: "string"
        },
        type: {
          enum: ["text"],
          type: "string"
        }
      },
      required: ["question", "type"],
      type: "object"
    },
    TemplateTextareaQuestion: {
      properties: {
        length: {
          enum: ["long", "medium", "short"],
          type: "string"
        },
        placeholder: {
          type: "string"
        },
        question: {
          type: "string"
        },
        type: {
          enum: ["textarea"],
          type: "string"
        }
      },
      required: ["question", "type"],
      type: "object"
    }
  },
  properties: {
    author: {
      anyOf: [
        {
          $ref: "#/definitions/TemplateAuthor"
        },
        {
          type: "string"
        }
      ]
    },
    description: {
      type: "string"
    },
    id: {
      type: "string"
    },
    name: {
      type: "string"
    },
    sections: {
      items: {
        $ref: "#/definitions/TemplateSection"
      },
      type: "array"
    }
  },
  required: ["description", "name", "sections"],
  type: "object"
};

export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;

export const isTemplate = ajv.compile(
  TemplateSchema
) as ValidateFunction<Template>;

export default function validate(value: unknown): Template {
  if (isTemplate(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isTemplate.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "Template" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
